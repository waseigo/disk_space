name: Build and Test DiskSpace NIF

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-14
          - ubuntu-latest
        elixir_otp:
          - { elixir: "1.14", otp: "26" }
          - { elixir: "1.18", otp: "27" }
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Elixir dependencies
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-${{ hashFiles('mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Cache compiled NIF
        uses: actions/cache@v4
        with:
          path: priv
          key: ${{ runner.os }}-nif-${{ matrix.elixir_otp.elixir }}-${{ matrix.elixir_otp.otp }}
          restore-keys: |
            ${{ runner.os }}-nif-

      - name: Set up Elixir and Erlang
        uses: erlef/setup-beam@v1
        with:
          elixir-version: ${{ matrix.elixir_otp.elixir }}
          otp-version: ${{ matrix.elixir_otp.otp }}

      - name: Install dependencies and compile NIF (Linux/macOS)
        run: |
          mix deps.get
          mix compile
        shell: bash
        if: runner.os != 'Windows'

      - name: Install MSYS2 (Windows)
        run: |
          choco install -y msys2
          refreshenv
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Install dependencies and compile NIF (Windows)
        run: |
          mix deps.get
          mix compile
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Verify NIF file exists (macOS arm64)
        run: |
          FILE=priv/disk_space.dylib
          if [ ! -f "$FILE" ]; then
            echo "ERROR: NIF not found at $FILE"
            exit 1
          fi
          ARCH=$(lipo -info $FILE | awk '{print $NF}')
          if [ "$ARCH" != "arm64" ]; then
            echo "ERROR: NIF architecture is $ARCH, expected arm64"
            exit 1
          else
            echo "NIF exists at $FILE with architecture $ARCH"
          fi
        shell: bash
        if: runner.os == 'macOS'

      - name: Verify NIF file exists (Linux)
        run: |
          FILE=priv/disk_space.so
          if [ ! -f "$FILE" ]; then
            echo "ERROR: NIF not found at $FILE"
            exit 1
          fi
          echo "NIF exists at $FILE"
        shell: bash
        if: runner.os == 'ubuntu-latest'

      - name: Verify NIF file exists (Windows)
        run: |
          $file = "priv/disk_space.dll"
          if (-Not (Test-Path $file)) {
            Write-Host "ERROR: NIF not found at $file"
            exit 1
          } else {
            Write-Host "NIF exists at $file"
          }
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Run tests (Linux/macOS)
        run: mix test
        shell: bash
        if: runner.os != 'Windows'

      - name: Run tests (Windows)
        run: mix test
        shell: pwsh
        if: runner.os == 'Windows'
